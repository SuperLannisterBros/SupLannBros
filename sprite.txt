#include <string.h>
#include <SFML/Graphics.hpp>

using namespace sf;

float offsetX = 0, offsetY = 0;

const int H = 15;
const int W = 40;

String TileMap[H] = {

	"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
	"B                          BB BB       B",
	"B                         B  B  B      B",
	"B                   BB    B     B      B",
	"B                          B   B       B",
	"B         BBBB              B B        B",
	"B                            B         B",
	"BBB                                    B",
	"B                                      B",
	"B                     B                B",
	"B    B         BB         BB           B",
	"B             B                        B",
	"B          B                           B",
	"B        B                             B",
	"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",

};



int ground = 398;
class PLAYER {
public:
	float dx, dy;
	FloatRect rect;
	bool onGround;
	Sprite sprite;
	float currentFrame;

	PLAYER(Texture &image)
	{
		sprite.setTexture(image);
		rect = FloatRect(32, 0, 40, 50);
		dx = dy = 0;
		currentFrame = 0;
	}
	void update(float time)
	{
		rect.left += dx*time;
		CollisionX();
		if (!onGround) dy = dy + 0.00005*time * 10;
		rect.top += dy*time;
		CollisionY();
		onGround = false;
		if (rect.top > ground) { rect.top = ground; dy = 0; onGround = true; }
		currentFrame += 0.005*time;
		if (currentFrame > 6) currentFrame -= 6;
		if (dx>0) sprite.setTextureRect(IntRect(40 * int(currentFrame), 244, 40, 50));
		if (dx<0) sprite.setTextureRect(IntRect(40 * int(currentFrame) + 40, 244, -40, 50));

		sprite.setPosition(rect.left - offsetX, rect.top - offsetY);
		dx = 0;
	}

	void CollisionX()
	{
		for (int i = rect.top / 32; i < (rect.top + rect.height) / 32; i++)
			for (int j = rect.left / 32; j < (rect.left + rect.width) / 32; j++)
			{
				if (TileMap[i][j] == 'B')
				{
					if (dx > 0) rect.left = j * 32 - rect.width;
					if (dx < 0) rect.left = j * 32 + 32;
				}
			}
	}

	void CollisionY()
	{
		for (int i = rect.top / 32; i < (rect.top + rect.height) / 32; i++)
			for (int j = rect.left / 32; j < (rect.left + rect.width) / 32; j++)
			{
				if (TileMap[i][j] == 'B')
				{
					if (dy>0)  { rect.top = i * 32 - rect.height;  dy = 0;   onGround = true; }
					if (dy<0)  { rect.top = i * 32 + 32;   dy = 0; }
				}
			}
	}



};



int main()

{

	RenderWindow window(VideoMode(640, 480), "Game");

	Texture t;
	t.loadFromFile("fang.png");

	float currentFrame = 0;

	PLAYER p(t);

	Clock clock;

	RectangleShape rectangle(Vector2f(32, 32));
	p.sprite.setTextureRect(IntRect(40 * int(currentFrame), 244, 40, 50));
	while (window.isOpen())
	{
		float time = clock.getElapsedTime().asMicroseconds();
		clock.restart();
		time = time / 300;
		Event event;
		while (window.pollEvent(event))
		{
			if (event.type == Event::Closed)
				window.close();
		}

		if (Keyboard::isKeyPressed(Keyboard::Left))
		{
			p.dx = -0.1;
		}
		if (Keyboard::isKeyPressed(Keyboard::Right))
		{
			p.dx = 0.1;
		}
		if (Keyboard::isKeyPressed(Keyboard::Up))
		{
			if (p.onGround) { p.dy = -0.4; p.onGround = false; }
		}

		p.update(time);

		if (p.rect.left>640 / 2) offsetX = p.rect.left - 640 / 2;
		if (p.rect.top<480 / 2) offsetY = p.rect.top - 480 / 2;

		window.clear();

		for (int i = 0; i<H; i++)
			for (int j = 0; j<W; j++)
			{
				if (TileMap[i][j] == 'B') rectangle.setFillColor(Color::Green);

				if (TileMap[i][j] == ' ') continue;

				rectangle.setPosition(j * 32 - offsetX, i * 32 - offsetY);
				window.draw(rectangle);
			}


		window.draw(p.sprite);
		window.display();


	}

	