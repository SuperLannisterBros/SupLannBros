#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <iostream>
#include <sstream>
#include <fstream>

using namespace sf;
using namespace std;

float offsetX = 0, offsetY = 96;

const int H = 21;
const int W = 240;
const int countOfPossibleEnemies = 10;

String TileMap[H] = {};

int ground = 398;

string getTextMission(int currentMission) {

	string missionText = "";//текст миссии и его инициализация

	switch (currentMission)//принимается номер миссии и в зависимости от него переменной missionText присваивается различный текст
	{
	case 1: missionText = "\nMission 1\n\nПомогите Тириону\nдобраться до стены.\n\nБерегитесь медведей\nи лютоволков,\nсобирайте монеты и\nне пейте слишком\nмного вина\n\n\nНажмите Tab для\nпросмотра задания"; break;
	case 2: missionText = "\nMission 2\n\nВпереди\nчерный замок!\n\nНе забывай собирать\nмонеты, никогда\nне знаешь, когда\nони пригодятся.\n\n\nНажмите Tab для\nпросмотра задания"; break;
	case 3: missionText = "\nИ так далее \nи тому подобное....."; break;
	case 4: missionText = "\nИ так далее \nи тому подобное....."; break;
	}

	return missionText;//ф-ция возвращает текст
};

void menu(RenderWindow & window) {
	Texture menuTexture1, menuTexture2, menuTexture3, aboutTexture, menuBackground;
	menuTexture1.loadFromFile("images/111.png");
	menuTexture2.loadFromFile("images/222.png");
	menuTexture3.loadFromFile("images/333.png");
	aboutTexture.loadFromFile("images/about.png");
	menuBackground.loadFromFile("images/0.jpg");
	Sprite menu1(menuTexture1), menu2(menuTexture2), menu3(menuTexture3), about(aboutTexture), menuBg(menuBackground);
	bool isMenu = 1;
	int menuNum = 0;
	menu1.setPosition(50, 30);
	menu2.setPosition(50, 90);
	menu3.setPosition(50, 150);
	menuBg.setPosition(0, 0);

	while (isMenu)
	{
		menu1.setColor(Color::White);
		menu2.setColor(Color::White);
		menu3.setColor(Color::White);
		menuNum = 0;
		window.clear(Color(129, 181, 221));

		if (IntRect(100, 30, 300, 50).contains(Mouse::getPosition(window))) { menu1.setColor(Color::Blue); menuNum = 1; }
		if (IntRect(100, 90, 300, 50).contains(Mouse::getPosition(window))) { menu2.setColor(Color::Blue); menuNum = 2; }
		if (IntRect(100, 150, 300, 50).contains(Mouse::getPosition(window))) { menu3.setColor(Color::Blue); menuNum = 3; }

		if (Mouse::isButtonPressed(Mouse::Left))
		{
			if (menuNum == 1) isMenu = false;//если нажали первую кнопку, то выходим из меню 
			if (menuNum == 2) { window.draw(about); window.display(); while (!Keyboard::isKeyPressed(Keyboard::Escape)); }
			if (menuNum == 3) { window.close(); isMenu = false; }

		}

		window.draw(menuBg);
		window.draw(menu1);
		window.draw(menu2);
		window.draw(menu3);

		window.display();
	}
}

class PLAYER {
public:
	Music jump, coin;
	int coins, health, Poisoning, levelCoins, TimeSpeed, EffectTime, level, lifes;
	bool onGround, life, alcoholism, effect, facingRight, gameOver, levelPassed, spawn, NewMission;
	float dx, dy, currentFrame;
	FloatRect rect;
	Sprite sprite;
	string EffectName;

	PLAYER(Texture &image)
	{
		jump.openFromFile("Jump.ogg");
		coin.openFromFile("gold.ogg");
		coin.setVolume(100);
		NewMission = true;
		levelPassed = false;
		gameOver = false;
		effect = false;
		TimeSpeed = 500;
		level = 1;
		lifes = 3;
		health = 100;
		life = true;
		sprite.setTexture(image);
		rect = FloatRect(175, 215, 32, 32);
		dx = dy = 0;
		currentFrame = 0;
		coins = 0;
		levelCoins = 0;
		facingRight = true;
		NewLevel(level);
	}

	void NewLevel(int levelNumber)
	{
		NewMission = true;
		levelCoins = 0;
		TimeSpeed = 500;
		spawn = true;
		EffectName = "";
		alcoholism = false;
		effect = false;
		offsetX = 0, offsetY = 96;
		string buffer;
		string fileName;
		ifstream levelFile;
		levelNumber += 48;
		fileName += levelNumber;
		fileName += ".txt";
		levelFile.open(fileName);
		if (levelFile.is_open())
		{
			for (int i = 0; i < H; i++)
			{
				getline(levelFile, buffer);
				TileMap[i] = buffer;
			}
			dx = dy = 0;
			facingRight = true;
			currentFrame = 0;
			rect = FloatRect(40, 40, 32, 32);
		}
		else
		{
			gameOver = true;
			level = 3;
		}
	}



	void update(float time)
	{
		rect.left += dx*time;
		Collision(0);
		if (!onGround) dy = dy + 0.00005*time * 10;
		rect.top += dy*time;
		onGround = false;
		Collision(1);
		currentFrame += 0.005*time;
		if (currentFrame > 2) currentFrame -= 2;
		if (dx > 0) {
			sprite.setTextureRect(IntRect(275 + 55 * int(currentFrame), 215, 30, 30));
			facingRight = true;
		}

		if (dx < 0) {
			sprite.setTextureRect(IntRect(275 + 55 * int(currentFrame) + 30, 215, -30, 30));
			facingRight = false;
		}

		if (dy != 0) if (dx>0) sprite.setTextureRect(IntRect(375, 215, 30, 30));
		else sprite.setTextureRect(IntRect(407, 215, -32, 32));

		if (dx == 0)
		{
			if (facingRight) sprite.setTextureRect(IntRect(336, 263, 30, 30));
			else sprite.setTextureRect(IntRect(366, 263, -30, 30));
		}

		if (health <= 0)
		{
			if (lifes > 0)
			{
				effect = false;
				TimeSpeed = 500;
				levelPassed = true;
				levelCoins = 0;
				NewLevel(level);
				lifes--;
				health = 100;
				//life = true;
			}
			else
			{
				gameOver = true;
			}
		}


		sprite.setPosition(rect.left - offsetX, rect.top - offsetY);
		dx = 0;
		if (rect.top > 580) {
			health = 0;
		}
	}

	void Collision(int dir)
	{
		for (int i = rect.top / 32; i<(rect.top + rect.height) / 32; i++)
			for (int j = rect.left / 32; j<(rect.left + rect.width) / 32; j++)
			{

				if (TileMap[i][j] == 'B' || TileMap[i][j] == '0')
				{
					if ((dx>0) && (dir == 0)) rect.left = j * 32 - rect.width;
					if ((dx<0) && (dir == 0)) rect.left = j * 32 + 32;
					if ((dy>0) && (dir == 1)) { rect.top = i * 32 - rect.height;  dy = 0;   onGround = true; }
					if ((dy<0) && (dir == 1)) { rect.top = i * 32 + 32;   dy = 0; }
				}

				if (TileMap[i][j] == 'G')
				{
					TileMap[i][j] = ' ';
					levelCoins++;
					coin.play();
				}

				if (TileMap[i][j] == 'V')
				{
					TileMap[i][j] = ' ';
					if (alcoholism == true) Vine();
					else health += 30;
					alcoholism = true;

				}

				if (TileMap[i][j] == 'E')
				{
					coins += levelCoins;
					level++;
					levelPassed = true;
					NewLevel(level);
					/*
					if (!NewLevel(level))
					{
					gameOver = true;
					}*/
				}
			}

	}

	void Vine()
	{
		offsetY = 96;
		TimeSpeed = 500;
		Poisoning = 0;
		EffectTime = 10;
		effect = true;
		srand(time(0));
		switch (rand() % 5 + 1)
		{
		case 1:
			TimeSpeed = 1000;
			EffectName = "Slow";
			break;
		case 2:
			TimeSpeed = 300;
			EffectName = "Fast";
			break;
		case 3:
			EffectName = "Poisoning";
			Poisoning = -5;
			break;
		case 4:
			EffectName = "Fuddle";
			break;
		case 5:
			EffectName = "Healing";
			Poisoning = 5;
			break;
		default:
			break;
		}
	}
};

class ENEMY
{

public:
	float dx, dy,speed;
	FloatRect rect;
	Sprite sprite;
	float currentFrame;
	bool life;
	int step, TextureH, TextureW, TextureRectW, TextureRectH, TextureDiedRectW, TextureDiedRectH, DiedFall;


	void set(Texture &image, int x, int y,string name)
	{
		sprite.setTexture(image);
		currentFrame = 0;
		life = true;
		if (name == "wolf"){
			speed = 0.05;
			TextureH = 64;
			TextureW = 32;
			TextureRectW = 249;
			step = 67;
			TextureRectH = 101;
			TextureDiedRectW = 577;
			TextureDiedRectH = 321;
			DiedFall = 20;
		}
		if (name == "bear"){
			speed = 0.05;
			TextureH = 32;
			TextureW = 64;
			TextureRectW = 720;
			step = 32;
			TextureRectH = 505;
			TextureDiedRectW = 816;
			TextureDiedRectH = 543;
			DiedFall = 37;
		}
		rect = FloatRect(x, y, TextureH, TextureW);
		dx = speed;
	}

	void update(float time)
	{
		rect.left += dx * time;
		Collision();
		currentFrame += time * 0.005;

		if (currentFrame >= 2) currentFrame -= 2;
		if (dx>0) sprite.setTextureRect(IntRect(TextureRectW + step * int(currentFrame), TextureRectH, TextureH, TextureW));
		if (dx<0) sprite.setTextureRect(IntRect(TextureRectW + step * int(currentFrame) + TextureH, TextureRectH, -TextureH, TextureW));

		if (!life) {
			sprite.setTextureRect(IntRect(TextureDiedRectW, TextureDiedRectH, 64, 32));
			sprite.setPosition(rect.left - offsetX, rect.top - offsetY + DiedFall);
		}
		else
		sprite.setPosition(rect.left - offsetX, rect.top - offsetY);

	}

	void Collision()
	{

		for (int i = rect.top / 32; i<(rect.top + rect.height) / 32; i++)
			for (int j = rect.left / 32; j<(rect.left + rect.width) / 32; j++)
				if (TileMap[i][j] == 'B')
				{
					if (dx>0)
					{
						rect.left = j * 32 - rect.width; dx *= -1;
					}
					else if (dx<0)
					{
						rect.left = j * 32 + 32; dx *= -1;
					}

				}
	}
};

bool StartGame(){
	bool over = false;
	RenderWindow window(VideoMode(640, 480), "Game Of Thrones");
	menu(window);
	Image image;
	image.loadFromFile("Texture.png");
	image.createMaskFromColor(Color(255, 128, 128));

	Texture t;
	t.loadFromImage(image);

	Sprite tile;
	tile.setTexture(t);

	bool showMissionText = true;//логическая переменная, отвечающая за появление текста миссии на экране
	Image quest_image;
	quest_image.loadFromFile("images/missionbg.jpg");
	quest_image.createMaskFromColor(Color(0, 0, 0));
	Texture quest_texture;
	quest_texture.loadFromImage(quest_image);
	Sprite s_quest;
	s_quest.setTexture(quest_texture);
	s_quest.setTextureRect(IntRect(0, 0, 340, 510));
	s_quest.setScale(0.6f, 0.6f);//чуть уменьшили картинку, => размер стал меньше


	Font font;
	font.loadFromFile("CyrilicOld.TTF");
	Text text("", font, 20), textEffect("", font, 20), textMission("", font, 20);
	text.setColor(Color::Yellow);
	text.setStyle(Text::Bold);
	textEffect.setStyle(Text::Bold);
	textEffect.setColor(Color::Yellow);
	textMission.setColor(Color::Black);

	textMission.setPosition(90, 100);//позиция всего этого текстового блока
	s_quest.setPosition(80, 100);//позиция фона для блока

	float currentFrame = 0;

	PLAYER p(t);

	ENEMY enemies[countOfPossibleEnemies];

	Music theme;
	Music gameover;
	theme.openFromFile("Theme.ogg");
	gameover.openFromFile("over.ogg");

	theme.setLoop(true);

	theme.play();


	int TimeToPass = 120;
	Clock clock;
	Clock GameTimeClock;
	int GameTime = 0;
	int LastTime = 0;
	int LastTime2 = 0;
	//RectangleShape rectangle(Vector2f(32, 32));


	p.sprite.setTextureRect(IntRect(40 * int(currentFrame), 244, 30, 30));

	bool died = false;

	while ((window.isOpen()) && (!over))
	{
		if (p.spawn) {
			int k = 0;
			for (int i = 0; i < H; i++)
				for (int j = 0; j < W; j++){
					if (TileMap[i][j] == 'W') {
						enemies[k].set(t, j * 32, i * 32, "wolf");
						k++;
					}
					if (TileMap[i][j] == 'R') {
						enemies[k].set(t, j * 32, i * 32 - 32, "bear");
						k++;
					}
				}
			p.spawn = false;
		}

		if (Keyboard::isKeyPressed(Keyboard::Escape)) return true;
		//if (Keyboard::isKeyPressed(Keyboard::Escape)) over = true;


		if (p.gameOver)
		{
			theme.stop();
			if (gameover.getStatus() == gameover.Stopped)
			{
				gameover.play();
			}

			Font gameoverFont;
			gameoverFont.loadFromFile("CyrilicOld.TTF");
			Text gameoverText("", gameoverFont, 40);
			gameoverText.setColor(Color::Black);
			gameoverText.setStyle(Text::Bold);

			window.clear(Color::Red);

			int gameCoins;
			gameCoins = p.coins + p.levelCoins;
			ostringstream CoinsString, LevelString;
			CoinsString << gameCoins;
			LevelString << p.level;
			gameoverText.setString("Game over.\nYour score: " + CoinsString.str() + "\nYour Level:" + LevelString.str() + "\nPress Escape to continue.");
			gameoverText.setPosition(40, 160);
			window.draw(gameoverText);
			window.display();


		}


		else
		{
			double time = clock.getElapsedTime().asMicroseconds();
			GameTime = GameTimeClock.getElapsedTime().asSeconds();


			if (p.effect) {
				if (p.EffectName == "Healing") textEffect.setColor(Color::Green);
				if (p.EffectName == "Poisoning") textEffect.setColor(Color::Red);
				if (p.EffectName != "Poisoning" && p.EffectName != "Healing") textEffect.setColor(Color::Yellow);
				if (p.EffectName == "Fuddle") {
					offsetY = rand() % 128 + 33;
					offsetX += rand() % 64 - 32;
				}
				if (GameTime > LastTime2) {
					p.EffectTime--;
					p.health += p.Poisoning;
					LastTime2 = GameTime;
				}
				if (p.EffectTime <= 0) {
					p.effect = false;
					p.EffectName = ' ';
					p.TimeSpeed = 500;
					offsetY = 96;
				}
			}

			if (p.levelPassed)
			{
				TimeToPass = 120 + GameTime;
				p.levelPassed = false;
			}

			if ((TimeToPass - GameTime) < 0) {
				if (GameTime > LastTime) p.health--;
				if ((GameTime > LastTime) && (p.health == 0) && (p.lifes == 0)) p.gameOver = true;
				LastTime = GameTime;
				GameTime = TimeToPass;
			}


			clock.restart();
			time = time / p.TimeSpeed;
			Event event;


			while (window.pollEvent(event))
			{


				if (event.type == Event::KeyPressed || p.NewMission)//событие нажатия клавиши
					if ((event.key.code == Keyboard::Tab) || p.NewMission) {//если клавиша ТАБ

						switch (showMissionText) {//переключатель, реагирующий на логическую переменную showMissionText

						case true: {
							ostringstream task;//строка текста миссии
							task << getTextMission(p.level);//вызывается функция getTextMission (она возвращает текст миссии), которая принимает в качестве аргумента функцию getCurrentMission(возвращающую номер миссии), а уже эта ф-ция принимает в качестве аргумента функцию p.getplayercoordinateX() (эта ф-ция возвращает Икс координату игрока)
							textMission.setString(task.str());//задаем
							showMissionText = false;//эта строка позволяет убрать все что мы вывели на экране
							p.NewMission = false;
							break;//выходим , чтобы не выполнить условие "false" (которое ниже)
						}
						case false: {
							textMission.setString("");//если не нажата клавиша таб, то весь этот текст пустой
							showMissionText = true;// а эта строка позволяет снова нажать клавишу таб и получить вывод на экран
							break;
						}
						}
					}
			}

			if (!died) {
				if (Keyboard::isKeyPressed(Keyboard::Left))
				{
					p.dx = -0.1;
				}
				if (Keyboard::isKeyPressed(Keyboard::Right))
				{
					p.dx = 0.1;
				}
				if (Keyboard::isKeyPressed(Keyboard::Space))
				{
					if (p.onGround) {
						p.dy = -0.4; p.onGround = false;
						p.jump.play();
					}
				}
			}




			p.update(time);
			p.sprite.setColor(Color::White);
			for (int i = 0; i < countOfPossibleEnemies; i++) {

				enemies[i].update(time);

				if (p.rect.intersects(enemies[i].rect))
					if (enemies[i].life) {
						if (p.rect.top < enemies[i].rect.top - 10 && p.dy>0) { enemies[i].dx = 0; p.dy = -0.2; enemies[i].life = false; }
						else { p.health -= 1; p.sprite.setColor(Color::Red); }
					}
			}




			if (p.rect.left > 640 / 2 && p.rect.left < 240 * 32 - (640 / 2))offsetX = p.rect.left - 640 / 2;

			window.clear(Color::Color(96, 130, 182));

			for (int i = 0; i < H; i++)
				for (int j = 0; j < W; j++)
				{
					if (TileMap[i][j] == 'B') {
						//		tile.setTextureRect(IntRect(312, 36, 32, 32));
						tile.setTextureRect(IntRect(362, 37, 32, 32));
						tile.setPosition(j * 32 - offsetX, i * 32 - offsetY);
						window.draw(tile);
					}


					if (TileMap[i][j] == 'V') {
						tile.setTextureRect(IntRect(428, 33, 32, 32));
						tile.setPosition(j * 32 - offsetX, i * 32 - offsetY);
						window.draw(tile);
					}


					if (TileMap[i][j] == 'G') {
						tile.setTextureRect(IntRect(245, 40, 32, 32));
						tile.setPosition(j * 32 - offsetX, i * 32 - offsetY);
						window.draw(tile);
					}

					if (TileMap[i][j] == '1') {
						tile.setTextureRect(IntRect(90, 371, 398, 297));
						tile.setPosition(j * 32 - offsetX - 79, i * 32 - offsetY - 255);
						window.draw(tile);
					}

					if (TileMap[i][j] == '2') {
						tile.setTextureRect(IntRect(28, 28, 117, 237));
						tile.setPosition(j * 32 - offsetX - 79, i * 32 - offsetY - 185);
						window.draw(tile);
					}

					if (TileMap[i][j] == '3') {
						tile.setTextureRect(IntRect(935, 129, 545, 264));
						tile.setPosition(j * 32 - offsetX - 80, i * 32 - offsetY - 225);
						window.draw(tile);
					}

					if (TileMap[i][j] == ' ' || TileMap[i][j] == 'E' || TileMap[i][j] == '0') continue;
				}


			ostringstream CoinsString, GameTimeString, HealthString, LevelString, AlcoEffect, LifesString;
			CoinsString << (p.coins + p.levelCoins);
			HealthString << p.health;
			GameTimeString << TimeToPass - GameTime;
			LevelString << p.level;
			AlcoEffect << p.EffectName;
			LifesString << p.lifes;
			text.setString("Coins: " + CoinsString.str() + "    Time:" + GameTimeString.str() + "   Health:" + HealthString.str() + "   Level:" + LevelString.str() + "   Lifes:" + LifesString.str() + "    ");
			text.setPosition(40, 40);
			textEffect.setString(AlcoEffect.str());
			textEffect.setPosition(542, 40);
			if (!showMissionText) { window.draw(s_quest); window.draw(textMission); } //миссия
			window.draw(text);
			window.draw(textEffect);
			window.draw(p.sprite);
			for (int i = 0; i < countOfPossibleEnemies; i++) {
				window.draw(enemies[i].sprite);
			}
			Text diedtext("", font, 40);
			diedtext.setColor(Color::Red);
			diedtext.setStyle(Text::Bold);
			if ((p.health <= 0 || died) && !p.gameOver)
			{
				died = true;
				window.clear(Color::Black);
				ostringstream CoinsString, LevelString, LifesString;
				CoinsString << (p.coins + p.levelCoins);
				LevelString << p.level;
				LifesString << p.lifes;
				diedtext.setString("You Died.\n\nYour score: " + CoinsString.str() + "\nYour Level:" + LevelString.str() + "\nLifes:" + LifesString.str() + "\nPress Tab to continue.");
				diedtext.setPosition(100, 100);
				window.draw(diedtext);
				TimeToPass = 120 + GameTime;
			}
			if (Keyboard::isKeyPressed(Keyboard::Tab)) died = false;
			window.display();
		}
	}
}

void GameRun()
{
	if (StartGame()) GameRun();
}

int main()
{
	GameRun();
	return 0;
}