#include <SFML/Graphics.hpp>
#include <iostream>
#include <sstream>
#include <fstream>

using namespace sf;
using namespace std;

float offsetX = 0, offsetY = 96;

const int H = 21;
const int W = 240;

String TileMap[H] = {};

int ground = 398;
class PLAYER {
public:
	int level;
	float dx, dy;
	FloatRect rect;
	bool onGround, life, alcoholism,effect;
	Sprite sprite;
	float currentFrame;
	int coins, health, Poisoning;
	bool facingRight;
	int TimeSpeed, EffectTime;
	string EffectName;

	PLAYER(Texture &image)
	{
		effect = false;
		TimeSpeed = 500;
		level = 1;
		health = 100;
		life = true;
		sprite.setTexture(image);
		rect = FloatRect(175, 215, 32, 32);
		dx = dy = 0;
		currentFrame = 0;
		coins = 0;
		facingRight = true;
		NextLevel(level);
	}

	bool NextLevel(int levelNumber)
	{
		alcoholism = false;
		string buffer;
		string fileName;
		ifstream levelFile;
		fileName += levelNumber+'0';
		fileName += ".txt";
		levelFile.open(fileName);
		if (!levelFile.is_open()) // если файл не открыт
			cout << "gavnicho!\n"; // сообщить об этом

			cout << fileName;
		
		for (int i = 0; i < H; i++)
		{
			getline(levelFile, buffer);
			TileMap[i] = buffer;
		}
		dx = dy = 0;
		facingRight = true;
		currentFrame = 0;
		return !levelFile.is_open();
	}

	void update(float time)
	{
		rect.left += dx*time;
		Collision(0);
		if (!onGround) dy = dy + 0.00005*time * 10;
		rect.top += dy*time;
		onGround = false;
		Collision(1);
		currentFrame += 0.005*time;
		if (currentFrame > 2) currentFrame -= 2;
		if (dx > 0) {
			sprite.setTextureRect(IntRect(275 + 55 * int(currentFrame), 215, 32, 32));
			facingRight = true;
		}

		if (dx < 0) {
			sprite.setTextureRect(IntRect(275 + 55 * int(currentFrame) + 32, 215, -32, 32));
			facingRight = false;
		}

		if (dy != 0) if (dx>0) sprite.setTextureRect(IntRect(375, 215, 32, 32));
		else sprite.setTextureRect(IntRect(407, 215, -32, 32));

		if (dx == 0)
		{
			if (facingRight) sprite.setTextureRect(IntRect(336, 263, 32, 32));
			else sprite.setTextureRect(IntRect(368, 263, -32, 32));

		}


		sprite.setPosition(rect.left - offsetX, rect.top - offsetY);
		dx = 0;
		if (rect.top > 580) health = 0;
		if (health <= 0) {
			life = false;
			health = 0;
		}
	}

	void Collision(int dir)
	{
		for (int i = rect.top / 32; i<(rect.top + rect.height) / 32; i++)
			for (int j = rect.left / 32; j<(rect.left + rect.width) / 32; j++)
			{
				
				if (TileMap[i][j] == 'B')
				{
					if ((dx>0) && (dir == 0)) rect.left = j * 32 - rect.width;
					if ((dx<0) && (dir == 0)) rect.left = j * 32 + 32;
					if ((dy>0) && (dir == 1)) { rect.top = i * 32 - rect.height;  dy = 0;   onGround = true; }
					if ((dy<0) && (dir == 1)) { rect.top = i * 32 + 32;   dy = 0; }
				}

				if (TileMap[i][j] == 'G')
				{
					TileMap[i][j] = ' ';
					coins++;
				}

				if (TileMap[i][j] == 'V')
				{
					TileMap[i][j] = ' ';
					if (alcoholism == true) Vine();
					else health += 30;
					alcoholism = true;
					
				}

				if (TileMap[i][j] == 'E')
				{
					level++;
					NextLevel(level);
					if (!NextLevel(level))
					{
						cout << "gameover!\n"; 
					}
				}
			}
	}

	void Vine()
	{
		offsetY = 96;
		TimeSpeed = 500;
		Poisoning = 0;
		EffectTime = 10;
		effect = true;
		srand(time(0));
		switch (rand() % 5 + 1)
		{
		case 1:
			TimeSpeed = 1000;
			EffectName = "Slow";
			break;
		case 2:
			TimeSpeed = 300;
			EffectName = "Fast";
			break;
		case 3:
			EffectName = "Poisoning";
			Poisoning = -5;
			break;
		case 4:
			EffectName = "fuddle";
			break;
		case 5:
			EffectName = "healing";
			Poisoning=5;
			break;
		default:
			break;
		}
	}
};

class ENEMY
{

public:
	float dx, dy;
	FloatRect rect;
	Sprite sprite;
	float currentFrame;
	bool life;


	void set(Texture &image, int x, int y)
	{
		sprite.setTexture(image);
		rect = FloatRect(x, y, 64, 32);
		dx = 0.05;
		currentFrame = 0;
		life = true;
	}

	void update(float time)
	{
		rect.left += dx * time;
		Collision();
		currentFrame += time * 0.005;

		if (currentFrame >= 2) currentFrame -= 2;
		if (dx>0) sprite.setTextureRect(IntRect(249+67 * int(currentFrame), 101, 64, 32));
		if (dx<0) sprite.setTextureRect(IntRect(249+67 * int(currentFrame) + 64, 101, -64, 32));

		if (!life) sprite.setTextureRect(IntRect(0, 0, 64, 32));


		sprite.setPosition(rect.left - offsetX, rect.top - offsetY);

	}


	void Collision()
	{

		for (int i = rect.top / 32; i<(rect.top + rect.height) / 32; i++)
			for (int j = rect.left / 32; j<(rect.left + rect.width) / 32; j++)
				if (TileMap[i][j] == 'B')
				{
					if (dx>0)
					{
						rect.left = j * 32 - rect.width; dx *= -1;
					}
					else if (dx<0)
					{
						rect.left = j * 32 + 32; dx *= -1;
					}

				}
	}

};


int main()

{

	RenderWindow window(VideoMode(640, 480), "Game Of Thrones");

	Image image;
	image.loadFromFile("Texture.png");
	image.createMaskFromColor(Color(255, 128, 128));

	Texture t;
	t.loadFromImage(image);

	Sprite tile;
	tile.setTexture(t);

	Font font;
	font.loadFromFile("CyrilicOld.TTF");
	Text text("", font, 20);
	text.setColor(Color::Blue);
	text.setStyle(Text::Bold);
	const int TimeToPass = 200;

	float currentFrame = 0;

	PLAYER p(t);

	ENEMY enemy; 
	enemy.set(t,12*32,16*32);

	Clock clock;
	Clock GameTimeClock;
	int GameTime = 0;
	int LastTime = 0;
	int LastTime2 = 0;
	RectangleShape rectangle(Vector2f(32, 32));


	p.sprite.setTextureRect(IntRect(40 * int(currentFrame), 244, 40, 50));

	while (window.isOpen())
	{




		double time = clock.getElapsedTime().asMicroseconds();
		GameTime = GameTimeClock.getElapsedTime().asSeconds();

		if (p.effect) {
			if (p.EffectName == "fuddle") {
				offsetY = rand() % 128 + 33;
				offsetX += rand() % 64 - 32;
			}
			if (GameTime > LastTime2) {
				p.EffectTime--;
				p.health += p.Poisoning;
				LastTime2 = GameTime;	
			}
			if (p.EffectTime <= 0) {
				p.effect = false;
				p.EffectName = ' ';
				p.TimeSpeed = 500;
				offsetY = 96;
			}
		}

		if ((TimeToPass - GameTime) < 0) {
			if (GameTime > LastTime) p.health--;
			LastTime = GameTime;
			GameTime = TimeToPass;
		}



		clock.restart();
		time = time / p.TimeSpeed;
		Event event;
		while (window.pollEvent(event))
		{
			if (event.type == Event::Closed)
				window.close();
		}

		if (p.life) {
			if (Keyboard::isKeyPressed(Keyboard::Left))
			{
				p.dx = -0.1;
			}
			if (Keyboard::isKeyPressed(Keyboard::Right))
			{
				p.dx = 0.1;
			}
			if (Keyboard::isKeyPressed(Keyboard::Space))
			{
				if (p.onGround) { p.dy = -0.4; p.onGround = false; }
			}
		}

		p.update(time);
		enemy.update(time);


		if (p.rect.intersects(enemy.rect))
		{
			if (enemy.life) {
				if (p.dy>0) { enemy.dx = 0; p.dy = -0.2; enemy.life = false; }
				else p.health-=1;
			}
		}




		if (p.rect.left>640 / 2) offsetX = p.rect.left - 640 / 2;

		window.clear(Color::Black);

		for (int i = 0; i<H; i++)
			for (int j = 0; j < W; j++)
			{
				if (TileMap[i][j] == 'B'){
					rectangle.setFillColor(Color::Green);
					//tile.setTextureRect(IntRect(312, 36, 32, 32));
					//tile.setPosition(j * 32 - offsetX, i * 32 - offsetY);
					//window.draw(tile);
					rectangle.setPosition(j * 32 - offsetX, i * 32 - offsetY);
					window.draw(rectangle);
				}

				if (TileMap[i][j] == 'V') {
					rectangle.setFillColor(Color::Red);
					rectangle.setPosition(j * 32 - offsetX, i * 32 - offsetY);
					window.draw(rectangle);
				}
               	//if (TileMap[i][j] == 'G') {
				//	tile.setTextureRect(IntRect(245, 40, 32, 32));
				//	tile.setPosition(j * 32 - offsetX, i * 32 - offsetY);
				//	window.draw(tile);
				//}
				if (TileMap[i][j] == 'G') {rectangle.setFillColor(Color::Yellow);
				rectangle.setPosition(j * 32 - offsetX, i * 32 - offsetY);
				window.draw(rectangle);
			}
				if (TileMap[i][j] == ' ') continue;
			}

		ostringstream CoinsString, GameTimeString, HealthString, LevelString,AlcoEffect;
		CoinsString << p.coins;
		HealthString << p.health;
		GameTimeString << TimeToPass - GameTime;
		LevelString << p.level;
		AlcoEffect << p.EffectName;
		text.setString("Coins: " + CoinsString.str() + "      Time:" + GameTimeString.str() + "      Health:" + HealthString.str() + "      Level:" + LevelString.str() + "      " + AlcoEffect.str());
		text.setPosition(40, 40);
		window.draw(text);

		window.draw(p.sprite);
		window.draw(enemy.sprite);
		window.display();

	}

	return 0;

}